#!/usr/bin/env python3
import pandas as pd
import requests
import time
import json
from datetime import datetime
import sys

class AMABotController:
    def __init__(self, csv_file='control_envios.csv'):
        self.csv_file = csv_file
        
        # Configuraci√≥n para webhook (env√≠os)
        self.webhook_url = "https://webhook.botpress.cloud/2d63c736-0910-47a8-b06a-c82c12372106"
        self.webhook_headers = {
            "x-bp-secret": "73c380fc550ad6b061d4d8ec3547731eprod",
            "Content-Type": "application/json"
        }
        
        # Configuraci√≥n para Tables API (consultas)
        self.botpress_token = "bp_pat_t3Qzk5mKulbKTudzrZHEJ2Rjqkb6z9f6qrw9"
        self.bot_id = "f70c360d-ed8d-402f-9cd2-488d9f1d358c"
        self.tables_base_url = "https://api.botpress.cloud/v1/tables"
        self.progress_table_name = "DataJsonProgressTable"
        self.tables_headers = {
            "Authorization": f"Bearer {self.botpress_token}",
            "x-bot-id": self.bot_id,
            "Content-Type": "application/json"
        }
        
        self.df = None
        self.botpress_data = {}
        self.load_data()
    
    def load_data(self):
        """Cargar datos del CSV de control"""
        try:
            self.df = pd.read_csv(self.csv_file, dtype={'numero': str})
            print(f"‚úÖ CSV de control cargado: {len(self.df)} registros")
            
            # Verificar si tiene las nuevas columnas de ubicaci√≥n
            if 'location' in self.df.columns:
                locations = self.df['location'].nunique()
                location_names = self.df['location_name'].nunique()
                print(f"   üè´ Locations: {locations}, Location names: {location_names}")
            else:
                print("   ‚ö†Ô∏è  CSV sin datos de ubicaci√≥n (estructura antigua)")
                
        except FileNotFoundError:
            print(f"‚ùå Error: No se encontr√≥ el archivo {self.csv_file}")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå Error al cargar CSV: {e}")
            sys.exit(1)
    
    def save_data(self):
        """Guardar cambios en el CSV"""
        try:
            self.df.to_csv(self.csv_file, index=False)
            print("üíæ Datos guardados correctamente")
        except Exception as e:
            print(f"‚ùå Error al guardar: {e}")
    
    def refresh_botpress_data(self):
        """Obtener datos frescos de Botpress y actualizar CSV local"""
        print("üîÑ Actualizando datos desde Botpress...")
        
        try:
            # Usar el m√©todo correcto de get_table_rows.py
            response = requests.post(
                f"{self.tables_base_url}/{self.progress_table_name}/rows/find",
                headers=self.tables_headers,
                json={"limit": 1000}
            )
            
            if response.status_code == 200:
                data = response.json()
                if 'rows' in data and isinstance(data['rows'], list):
                    rows = data['rows']
                    print(f"‚úÖ Datos de Botpress actualizados: {len(rows)} usuarios")
                    
                    # Crear diccionario para acceso r√°pido
                    self.botpress_data = {}
                    for row in rows:
                        client_num = str(row.get('clientNumber', ''))
                        self.botpress_data[client_num] = row
                    
                    # Sincronizar con CSV local
                    self.sync_with_botpress_data()
                    return True
                else:
                    print("‚ö†Ô∏è No se encontraron datos en la respuesta")
                    return False
            else:
                print(f"‚ùå Error API: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error consultando Botpress: {e}")
            return False
    
    def sync_with_botpress_data(self):
        """Sincronizar estado del CSV con datos de Botpress"""
        print("üîÑ Sincronizando estado local con Botpress...")
        
        actualizados = 0
        nuevos_completados = 0
        
        for index, row in self.df.iterrows():
            numero = str(row['numero'])
            sesion = row['sesion']
            day = row['day']
            
            # Solo procesar sesi√≥n 1 por ahora
            if sesion != 1:
                continue
            
            if numero in self.botpress_data:
                botpress_row = self.botpress_data[numero]
                session1_data = botpress_row.get('session1', {})
                
                if isinstance(session1_data, dict):
                    day_status = str(session1_data.get(str(day), '0'))
                    
                    # Actualizar ultimo_estado_botpress
                    self.df.at[index, 'ultimo_estado_botpress'] = int(day_status) if day_status.isdigit() else 0
                    
                    # Si est√° completado (estado 2) y no estaba marcado
                    if day_status == '2' and row['completado'] == 0:
                        self.df.at[index, 'completado'] = 1
                        self.df.at[index, 'fecha_completado'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        nuevos_completados += 1
                        print(f"   ‚úÖ Completado: {numero} - Sesi√≥n {sesion}, D√≠a {day}")
                    
                    # Si est√° enviado (estado 1) y no estaba marcado
                    elif day_status == '1' and row['enviado'] == 0:
                        self.df.at[index, 'enviado'] = 1
                        if row['intentos_envio'] == 0:
                            self.df.at[index, 'intentos_envio'] = 1
                        self.df.at[index, 'fecha_envio'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        self.df.at[index, 'resultado'] = 'Sincronizado desde Botpress'
                    
                    actualizados += 1
        
        print(f"   üîÑ Actualizados: {actualizados}, ‚úÖ Nuevos completados: {nuevos_completados}")
    
    def can_send_message(self, numero, sesion, day, csv_row):
        """Verificar si se puede enviar mensaje basado en reglas de negocio"""
        
        # Verificar l√≠mite de intentos (m√°ximo 2)
        if csv_row['intentos_envio'] >= 2:
            return False, f"M√°ximo intentos alcanzado ({csv_row['intentos_envio']}/2)"
        
        # Si ya est√° completado, no reenviar
        if csv_row['completado'] == 1:
            return False, "Ya completado"
        
        # Sesi√≥n 1, D√≠a 1 siempre se permite (inicio de campa√±a)
        if sesion == 1 and day == 1:
            return True, "Inicio de campa√±a - siempre permitido"
        
        # Para otros d√≠as/sesiones, verificar prerrequisitos
        numero_str = str(numero)
        if numero_str not in self.botpress_data:
            return False, "Usuario no encontrado en Botpress"
        
        botpress_row = self.botpress_data[numero_str]
        session1_data = botpress_row.get('session1', {})
        
        if not isinstance(session1_data, dict):
            return False, "Datos de sesi√≥n inv√°lidos"
        
        # Para d√≠as posteriores en sesi√≥n 1
        if sesion == 1 and day > 1:
            prev_day_status = str(session1_data.get(str(day - 1), '0'))
            if prev_day_status == '2':  # D√≠a anterior completado
                return True, f"D√≠a anterior completado (d√≠a {day-1})"
            else:
                return False, f"D√≠a anterior no completado (d√≠a {day-1}: {prev_day_status})"
        
        # Para sesiones posteriores (implementar cuando se necesite)
        if sesion > 1:
            return False, "Sesiones > 1 no implementadas a√∫n"
        
        return True, "Condiciones cumplidas"
    
    def enviar_mensaje(self, numero, sesion, day):
        """Enviar mensaje individual via webhook"""
        data = {
            "clientNumber": int(numero),
            "session": int(sesion),
            "day": int(day)
        }
        
        try:
            response = requests.post(self.webhook_url, headers=self.webhook_headers, json=data)
            return response.status_code == 200, response.status_code, response.text
        except Exception as e:
            return False, 0, str(e)
    
    def procesar_envios(self, limite=None, sesion_especifica=None, day_especifico=None):
        """Procesar env√≠os con validaci√≥n completa"""
        
        # Primero actualizar datos de Botpress
        if not self.refresh_botpress_data():
            print("‚ùå No se pudieron actualizar datos de Botpress")
            return
        
        # Filtrar registros pendientes
        pendientes = self.df[self.df['enviado'] == 0]
        
        # Aplicar filtros adicionales si se especifican
        if sesion_especifica:
            pendientes = pendientes[pendientes['sesion'] == sesion_especifica]
        if day_especifico:
            pendientes = pendientes[pendientes['day'] == day_especifico]
        
        if len(pendientes) == 0:
            print("‚úÖ No hay env√≠os pendientes")
            return
        
        if limite:
            pendientes = pendientes.head(limite)
        
        print(f"üì§ Procesando {len(pendientes)} env√≠os...")
        
        exitosos = 0
        fallidos = 0
        omitidos = 0
        enviados_detalle = []  # Lista para almacenar detalles de env√≠os exitosos
        
        for index, row in pendientes.iterrows():
            numero = row['numero']
            sesion = row['sesion']
            day = row['day']
            
            print(f"\\nüìû Evaluando: {numero} - Sesi√≥n {sesion}, D√≠a {day}")
            
            # Verificar si se puede enviar
            can_send, reason = self.can_send_message(numero, sesion, day, row)
            
            if not can_send:
                print(f"   ‚è≠Ô∏è Omitido: {reason}")
                self.df.at[index, 'resultado'] = f"Omitido: {reason}"
                omitidos += 1
                continue
            
            print(f"   ‚úÖ Validado: {reason}")
            print(f"   üì§ Enviando mensaje...")
            
            # Incrementar contador de intentos
            self.df.at[index, 'intentos_envio'] = self.df.at[index, 'intentos_envio'] + 1
            
            # Enviar mensaje
            exito, status_code, respuesta = self.enviar_mensaje(numero, sesion, day)
            
            # Actualizar registro
            self.df.at[index, 'enviado'] = 1 if exito else 0
            self.df.at[index, 'fecha_envio'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            self.df.at[index, 'resultado'] = f"Status: {status_code} (Intento {self.df.at[index, 'intentos_envio']})"
            
            if exito:
                print(f"   ‚úÖ Enviado exitosamente (Intento {self.df.at[index, 'intentos_envio']})")
                exitosos += 1
                # Almacenar detalles del env√≠o exitoso
                enviados_detalle.append({
                    'numero': numero,
                    'sesion': sesion,
                    'day': day,
                    'intento': self.df.at[index, 'intentos_envio']
                })
            else:
                print(f"   ‚ùå Error: {status_code} - {respuesta}")
                fallidos += 1
            
            # Pausa entre env√≠os
            print(f"   ‚è±Ô∏è Esperando 3 segundos...")
            time.sleep(3)
        
        # Guardar cambios
        self.save_data()
        
        # Actualizar datos de Botpress despu√©s de env√≠os
        print("\\nüîÑ Actualizando progreso despu√©s de env√≠os...")
        self.refresh_botpress_data()
        
        print(f"\\nüìä RESUMEN DE ENV√çOS:")
        print(f"   ‚úÖ Exitosos: {exitosos}")
        print(f"   ‚ùå Fallidos: {fallidos}")
        print(f"   ‚è≠Ô∏è Omitidos: {omitidos}")
        print(f"   üìã Total procesados: {exitosos + fallidos + omitidos}")
        
        # Mostrar detalles de env√≠os exitosos
        if enviados_detalle:
            print(f"\\nüìã DETALLES DE ENV√çOS EXITOSOS:")
            for envio in enviados_detalle:
                print(f"   üìû {envio['numero']} ‚Üí Sesi√≥n {envio['sesion']}, D√≠a {envio['day']} (Intento {envio['intento']})")
        
        # Mostrar resumen por sesi√≥n/d√≠a
        if enviados_detalle:
            print(f"\\nüìà RESUMEN POR SESI√ìN/D√çA:")
            sesion_day_counts = {}
            for envio in enviados_detalle:
                key = f"Sesi√≥n {envio['sesion']}, D√≠a {envio['day']}"
                sesion_day_counts[key] = sesion_day_counts.get(key, 0) + 1
            
            for sesion_day, count in sesion_day_counts.items():
                print(f"   üì§ {sesion_day}: {count} env√≠o{'s' if count != 1 else ''}")
    
    def mostrar_estadisticas(self):
        """Mostrar estad√≠sticas completas"""
        # Actualizar datos primero
        self.refresh_botpress_data()
        
        total = len(self.df)
        enviados = len(self.df[self.df['enviado'] == 1])
        pendientes = total - enviados
        completados = len(self.df[self.df['completado'] == 1])
        con_intentos = len(self.df[self.df['intentos_envio'] > 0])
        
        print(f"\\nüìä ESTAD√çSTICAS GENERALES:")
        print(f"   üìã Total registros: {total}")
        print(f"   üì§ Enviados: {enviados}")
        print(f"   ‚è≥ Pendientes: {pendientes}")
        print(f"   ‚úÖ Completados: {completados}")
        print(f"   üìà Tasa env√≠o: {(enviados/total)*100:.1f}%")
        print(f"   üèÜ Tasa completado: {(completados/con_intentos)*100:.1f}%" if con_intentos > 0 else "   üèÜ Tasa completado: 0.0%")
        
        # Por ubicaci√≥n si est√°n disponibles
        if 'location' in self.df.columns:
            self.mostrar_estadisticas_por_ubicacion()
        
        # Por sesi√≥n
        print(f"\\nüìã ESTAD√çSTICAS POR SESI√ìN:")
        for sesion in range(1, 7):
            sesion_df = self.df[self.df['sesion'] == sesion]
            if len(sesion_df) > 0:
                enviados_sesion = len(sesion_df[sesion_df['enviado'] == 1])
                completados_sesion = len(sesion_df[sesion_df['completado'] == 1])
                total_sesion = len(sesion_df)
                print(f"   Sesi√≥n {sesion}: {enviados_sesion}/{total_sesion} enviados, {completados_sesion} completados")
    
    def mostrar_estadisticas_por_ubicacion(self):
        """Mostrar estad√≠sticas detalladas por ubicaci√≥n"""
        print(f"\\nüè´ ESTAD√çSTICAS POR UBICACI√ìN:")
        
        # Agrupar por location y location_name
        ubicaciones = self.df.groupby(['location', 'location_name']).agg({
            'numero': 'nunique',  # usuarios √∫nicos
            'enviado': 'sum',     # total enviados
            'completado': 'sum',  # total completados
            'intentos_envio': lambda x: (x > 0).sum()  # con intentos
        }).reset_index()
        
        ubicaciones.columns = ['location', 'location_name', 'usuarios', 'enviados', 'completados', 'con_intentos']
        
        for _, row in ubicaciones.iterrows():
            location = row['location']
            location_name = row['location_name']
            usuarios = row['usuarios']
            enviados = row['enviados']
            completados = row['completados']
            con_intentos = row['con_intentos']
            
            # Calcular registros totales para esta ubicaci√≥n
            registros_location = len(self.df[(self.df['location'] == location) & 
                                           (self.df['location_name'] == location_name)])
            
            tasa_envio = (enviados/registros_location)*100 if registros_location > 0 else 0
            tasa_completado = (completados/con_intentos)*100 if con_intentos > 0 else 0
            
            print(f"   üìç {location} - {location_name}:")
            print(f"      üë• {usuarios} usuarios, üìä {registros_location} registros")
            print(f"      üì§ {enviados} enviados ({tasa_envio:.1f}%)")
            print(f"      ‚úÖ {completados} completados ({tasa_completado:.1f}%)")
            
        # Resumen por salones si hay m√∫ltiples
        salones = self.df['salon'].nunique() if 'salon' in self.df.columns else 0
        if salones > 1:
            print(f"\\nüö™ RESUMEN POR SAL√ìN:")
            salon_stats = self.df.groupby('salon').agg({
                'numero': 'nunique',
                'enviado': 'sum', 
                'completado': 'sum'
            }).reset_index()
            salon_stats.columns = ['salon', 'usuarios', 'enviados', 'completados']
            
            for _, row in salon_stats.iterrows():
                print(f"   üö™ {row['salon']}: {row['usuarios']} usuarios, {row['enviados']} enviados, {row['completados']} completados")

# Ejemplo de uso y men√∫
if __name__ == "__main__":
    controller = AMABotController('control_envios.csv')
    
    while True:
        print(f"\\nü§ñ AMA BOT CONTROLLER - SISTEMA INTEGRADO")
        print("1. Ver estad√≠sticas actualizadas")
        print("2. Procesar TODOS los pendientes")
        print("3. Procesar sesi√≥n/d√≠a espec√≠fico")
        print("4. Procesar cantidad limitada")
        print("5. Actualizar datos desde Botpress")
        print("6. Salir")
        
        opcion = input("\\nSelecciona una opci√≥n: ")
        
        if opcion == "1":
            controller.mostrar_estadisticas()
        
        elif opcion == "2":
            controller.procesar_envios()
        
        elif opcion == "3":
            try:
                sesion = int(input("Sesi√≥n (1-6): "))
                day = int(input("D√≠a (1-5): "))
                controller.procesar_envios(sesion_especifica=sesion, day_especifico=day)
            except ValueError:
                print("‚ùå Por favor ingresa n√∫meros v√°lidos")
        
        elif opcion == "4":
            try:
                limite = int(input("Cantidad a procesar: "))
                controller.procesar_envios(limite=limite)
            except ValueError:
                print("‚ùå Por favor ingresa un n√∫mero v√°lido")
        
        elif opcion == "5":
            controller.refresh_botpress_data()
            controller.save_data()
        
        elif opcion == "6":
            print("üëã ¬°Hasta luego!")
            break
        
        else:
            print("‚ùå Opci√≥n no v√°lida")